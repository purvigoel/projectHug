Design Decisions:Ray extended our intersect project by adding functionality for shadows, directional lights, and reflection. I designed Intersect in a way that I didn’t need to make huge changes to support recursion for reflection. To accomplish reflection, I just change the location of the eye to be the point of intersection between the previous ray and the object, and the direction of the reflected ray. I have a recursion depth of 3, after which recursion stops. This number can be changed in the method recolorSceneRecursive() in the file RayScene.cpp on line 31. I’ve included a message in the code comments there to indicate where to change the depth. For shadows, I do a similar calculation to the one I was doing to find ray-object collisions, except with the reference ray being from the point of intersection to all lights. If there is an object that is closer to the intersection point than the given light, it occludes the light and the light does not have a contribution.A major design decision was to calculate the UV coordinates for textures within the ImplicitShape classes. I did this because I also calculate the normal and intersection points within these classes, and because texture mapping is quite specific to each shape, I let each shape handle its own UV calculation.I used QImage to hold texture files. It required some cleanup in the Scene destructor because I didn’t use smart pointers.Sources:I found myself a little bit confused about the difference between directional and point lights. I used these sources to understand more conceptually the differences, as well as the textbook and lectures. https://www.pluralsight.com/blog/film-games/understanding-different-light-typeshttps://docs.microsoft.com/en-us/windows/desktop/direct3d9/light-typesBugs:I didn’t implement refraction, not sure if we were supposed to? It didn’t work on the demo.I tested my code on many of the example scenes in the scenes/ray folder. This is just an opinion but knowing my own project and its limits, I highly, highly suggest not running raykiller.xml :D I’m not saying the computer will break, I’m just saying the computer will be really sad. Speaking from experience.I ran the Valgrind Memory Analyzer to check for memory leaks and the leaks seem to be from external methods.